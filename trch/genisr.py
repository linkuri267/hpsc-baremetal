#!/usr/bin/python2

import argparse
import re
import sys
import os

def parse_defs(fname, incpaths):
    defs = {}
    for incpath in ['.'] + incpaths:
        try:
            for line in open(os.path.join(incpath, fname)):
                line = line.strip()
                m = re.match(r'^#define\s+(\w+)\s+(\w+)', line)
                if m:
                    key = m.group(1)
                    val = m.group(2)
                    defs[key] = val
            break # first found file only
        except IOError:
                pass
    return defs

def expand_macros(defs, s):
    for v in defs:
        s = re.sub(r'\b%s\b' % v, defs[v], s)
    return s

def parse_irqmap(fname, defs, incpaths):
    d = {}
    ifdef = [True] # stack, each bool element indicates if enabled
    linenum = 0
    for line in open(fname):
        linenum += 1

        line = line.strip()
        if len(line) == 0 or line.startswith('//'):
                continue

        m = re.match(r'^#else(\s+//.*)?', line)
        if m:
                ifdef[-1] = not ifdef[-1]
                continue
        m = re.match(r'^#endif(\s+//.*)?', line)
        if m:
                ifdef = ifdef[:-1]
                continue

        if not ifdef[-1]:
                continue

        m = re.match(r'^#if (.+)', line)
        if m:
                expr = m.group(1)
                cond = bool(eval(expand_macros(defs, expr)))
                ifdef += [cond]
                continue
        m = re.match(r'^#ifdef ([A-Za-z0-9_]+)', line)
        if m:
                macro = m.group(1)
                ifdef += [macro in defs]
                continue

        m = re.match(r'^#error (.*)', line)
        if m:
                msg = m.group(1)
                raise Exception("error on line %u: %s" % (linenum, msg))
                continue
        m = re.match(r'^#info (.*)', line)
        if m:
                msg = m.group(1)
                print(msg)
                continue


        m = re.match(r'^#include ["<]([^">]+)[>"]', line)
        if m:
                incfile = m.group(1)
                defs.update(parse_defs(incfile, incpaths))
                continue

        m = re.match(r'^#.*', line)
        if m:
                raise Exception(("parse error on line %u: "
                                "invalid preprocessor directive") % linenum)

        line = expand_macros(defs, line)
        p = line
        if ':' in p: # explicitly named C ISR
            kv = [s.strip() for s in p.split(':')]
            irq = int(eval(kv[0]))
            if irq in d:
                raise Exception("line %u: IRQ %u redefined" % (linenum, irq))
            d[irq] = kv[1]
        else: # create an ISR stub
            if '-' in p:
                r = map(int, p.split('-'))
                irq_nums = range(r[0], r[1])
            else:
                irq_nums = [int(p)]
            for n in irq_nums:
                d[n] = None
    return d

def dict_entry(s):
    m = re.match(r'([^=]*)(=(.*))?', s)
    if m:
        name = m.group(1).strip()
        value_group = m.group(3)
        value = value_group.strip() if value_group is not None else ""
    if not m or len(name) == 0:
        raise Exception("Invalid dict entry string: '%s'" % s)
    return { name: value }

parser = argparse.ArgumentParser(
    description="Generate assembly source for vector table")
parser.add_argument('--internal-irqs', type=int, default=16,
    help='Number internal IRQs')
parser.add_argument('--external-irqs', type=int, default=240,
   help='Number external IRQs')
parser.add_argument('--irqmap',
    help='IRQ to ISR handler map file')
parser.add_argument('--include-dir', '-I', action='append', default=['.'],
    help='Add path where to look for included files')
parser.add_argument('--define', '-D', action='append',
    type=dict_entry, default=[],
    help='Define a macro, format: NAME[=VALUE]')
parser.add_argument('--verbose', '-v', action='store_true',
    help='Print IRQ map')
parser.add_argument('out_asm',
    help='Output file with generated C source')
parser.add_argument('out_c',
    help='Output file with generated assembly source')
args = parser.parse_args()

defs = {}
for d in args.define:
        defs.update(d)
irqmap = parse_irqmap(args.irqmap, defs, args.include_dir)

if args.verbose:
    for irq in irqmap:
        print("%4u: %s" % (irq, irqmap[irq]))

if irqmap is None:
        irqmap = range(0, 240)

def external(irq):
	return irq - args.internal_irqs

def is_internal(irq):
        return irq < 16;

NVIC_BASE = 0xe000e000
NVIC_ICPR = 0x280

# ISR handlers for each vector number
# The rest of the vectors (not in this dict) get default handler
DEFAULT_ISR = "hang"
isr = {
 0: None,
 1: "reset",
11: "svc",
15: "systick",
}

f = open(args.out_asm, "w")

f.write(
"""/* This file was automatically generated by genisr.py. */

.cpu cortex-m4
.thumb

.global __entry
.word __stacktop
"""
)

for i in range(0, args.internal_irqs + args.external_irqs):
    handler = None
    if i in isr:
        if isr[i] is not None:
            handler = isr[i]
    elif external(i) in irqmap:
        handler = "isr%u" % external(i)
    elif is_internal(i):
        handler = "exc%u" % i
    else:
        handler = DEFAULT_ISR

    if handler is not None:
        f.write(".word %s\n" % handler)

f.write("\n")

f.write(
"""
.thumb_func
__entry: /* same location as 'reset'*/

.thumb_func
reset:
    b crt_init
    b hang
    b hang

.thumb_func
svc:
    mov r0, #0
    sub r0, #7 // 0xfffffff9: priveledged Thread mode with main stack
    bx r0

.thumb_func
systick:
    push {r0, r1, lr}

    bl systick_isr

    /* Clear Pending flag */
    ldr r0, icsr_addr
    mov r1, #1
    lsl r1, #25 /* PENDSTCLR */
    str r1, [r0]

    pop {r0, r1, pc}

    .align 2

icsr_addr: /* re-useable by across exc handlers */
    .word 0xe000ed04

.thumb_func
hang:   b .
    b hang

.thumb_func
crt_init:
    // Zero-initialize .bss
    ldr r0, =__bss_start__
    ldr r1, =__bss_end__
    mov r2, #0
bss_zero_loop:
    str r2, [r0]
    add r0, #4
    cmp r0, r1
    bne bss_zero_loop
    bl main
    b hang
"""
+ "\n");

for irq in range(args.internal_irqs):
    if not irq in isr:
      f.write(("""
.thumb_func
exc%u:
    b exc%u
""") % (irq, irq))

for irq in irqmap:
    nvic_icpr_addr = NVIC_BASE + NVIC_ICPR + (irq // 32) * 4
    nvic_icpr_shift = irq % 32
    if irqmap[irq] is not None:
        isr = irqmap[irq]
    else:
        isr = "c_isr%u" % irq

    f.write(("""
.thumb_func
isr%u:
    push {r0, r1, lr}

    mov r1, #%u
    ldr r0, isr%u_fmt_str_addr
    bl printf

    bl %s

    /* Clear Pending flag */
    ldr r0, isr%u_icpr_addr
    mov r1, #1
    lsl r1, #%u
    str r1, [r0]

    pop {r0, r1, pc}

    .align 2
isr%u_icpr_addr:
    .word 0x%08x
isr%u_fmt_str_addr:
    .word isr_fmt_str
""") % (irq, irq, irq, isr, irq, nvic_icpr_shift, irq, nvic_icpr_addr, irq))

if len(irqmap) > 0:
    f.write("""
isr_fmt_str:
    .string "IRQ #%u\\r\\n"
""")

# Generate C source for stub IRQ handlers (ISRs)

f = open(args.out_c, "w")

f.write(
"""
/* This file was automatically generated by genisr.py.
 *
 * The following define stub functions that are called by the IRQ handlers
 * defined in assembly in vectors.s (generated by genvec.py).
 */
""")

f.write(
"""
#include "printf.h"
""")

# Create stub ISRs for IRQs for which no ISR func was named
for irq in irqmap:
    if irqmap[irq] is None:
        f.write(
"""
int c_isr%u (void) {
    static unsigned num_invoc = 0;
    void *p = 0x0;
    asm ("mov %%0, lr\\n" : "=r" (p));
    printf("IRQ %u (%%lu): LR %%p\\r\\n", num_invoc, p);
    num_invoc++;
    return(0);
}
""" % (irq, irq))
